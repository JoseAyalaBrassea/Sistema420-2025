
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Part_test_legacyScalarFieldEnum = {
  pn: 'pn',
  application: 'application',
  revision: 'revision',
  revision_datetime: 'revision_datetime',
  fixture: 'fixture',
  air_fixture: 'air_fixture',
  nominal_voltage: 'nominal_voltage',
  tube_qty_limit: 'tube_qty_limit',
  is_shield_installed: 'is_shield_installed',
  is_diode_installed: 'is_diode_installed',
  contact_1_type: 'contact_1_type',
  contact_2_type: 'contact_2_type',
  contact_3_type: 'contact_3_type',
  contact_4_type: 'contact_4_type',
  atm: 'atm',
  atm_max_time: 'atm_max_time',
  atm_start_frequency: 'atm_start_frequency',
  atm_end_frequency: 'atm_end_frequency',
  atm_step_frequency: 'atm_step_frequency',
  atm_coil_voltage: 'atm_coil_voltage',
  buz: 'buz',
  buz_cycles: 'buz_cycles',
  buz_frequency: 'buz_frequency',
  crs: 'crs',
  crs_max_resistance: 'crs_max_resistance',
  crs_min_resistance: 'crs_min_resistance',
  crs_nom_resistance: 'crs_nom_resistance',
  crs_tolerance: 'crs_tolerance',
  dio: 'dio',
  dcp: 'dcp',
  dcp_max_peak_to_peak: 'dcp_max_peak_to_peak',
  dcr: 'dcr',
  dcr_max_peak: 'dcr_max_peak',
  dcr_coil_voltage: 'dcr_coil_voltage',
  dcr_start_frequency: 'dcr_start_frequency',
  dcr_end_frequency: 'dcr_end_frequency',
  dcr_step_frequency: 'dcr_step_frequency',
  dcr_start_measurment_window: 'dcr_start_measurment_window',
  dcr_window_width: 'dcr_window_width',
  dcr_sweeps: 'dcr_sweeps',
  fbo: 'fbo',
  fbo_coil_voltage: 'fbo_coil_voltage',
  fbo_percent_overdrive: 'fbo_percent_overdrive',
  fbo_delay: 'fbo_delay',
  irs: 'irs',
  irs_range: 'irs_range',
  irs_coil_voltage: 'irs_coil_voltage',
  irs_delay: 'irs_delay',
  kel: 'kel',
  ocu: 'ocu',
  ocu_max_current: 'ocu_max_current',
  ocu_min_current: 'ocu_min_current',
  otm: 'otm',
  otm_max_time: 'otm_max_time',
  otm_start_frequency: 'otm_start_frequency',
  otm_end_frequency: 'otm_end_frequency',
  otm_step_frequency: 'otm_step_frequency',
  otm_coil_voltage: 'otm_coil_voltage',
  ovd: 'ovd',
  ovd_min_differential: 'ovd_min_differential',
  ovd_max_differential: 'ovd_max_differential',
  ovr: 'ovr',
  ovr_max_percentage: 'ovr_max_percentage',
  ovr_min_percentage: 'ovr_min_percentage',
  ovt: 'ovt',
  ovt_max_voltage: 'ovt_max_voltage',
  ovt_min_voltage: 'ovt_min_voltage',
  ovt_delay: 'ovt_delay',
  rcu: 'rcu',
  rcu_max_current: 'rcu_max_current',
  rcu_min_current: 'rcu_min_current',
  rtm: 'rtm',
  rtm_max_time: 'rtm_max_time',
  rtm_start_frequency: 'rtm_start_frequency',
  rtm_end_frequency: 'rtm_end_frequency',
  rtm_step_frequency: 'rtm_step_frequency',
  rtm_coil_voltage: 'rtm_coil_voltage',
  rvt: 'rvt',
  rvt_max_voltage: 'rvt_max_voltage',
  rvt_min_voltage: 'rvt_min_voltage',
  rvt_delay: 'rvt_delay',
  scr: 'scr',
  scr_max_resistance: 'scr_max_resistance',
  scr_min_resistance: 'scr_min_resistance',
  scr_delay: 'scr_delay',
  scs: 'scs',
  scs_max_delta: 'scs_max_delta',
  scs_cycles: 'scs_cycles',
  scs_warm_up: 'scs_warm_up',
  scs_delay: 'scs_delay',
  sho: 'sho',
  sho_threshold_resistance: 'sho_threshold_resistance',
  ttm: 'ttm',
  ttm_min_time: 'ttm_min_time'
};

exports.Prisma.Part_test_specificationsScalarFieldEnum = {
  pn: 'pn',
  application: 'application',
  revision: 'revision',
  revision_datetime: 'revision_datetime',
  fixture: 'fixture',
  air_fixture: 'air_fixture',
  nominal_voltage: 'nominal_voltage',
  sort_file: 'sort_file',
  graph_freq: 'graph_freq',
  tube_qty_limit: 'tube_qty_limit',
  is_shield_installed: 'is_shield_installed',
  is_diode_installed: 'is_diode_installed',
  contact_1_type: 'contact_1_type',
  contact_2_type: 'contact_2_type',
  contact_3_type: 'contact_3_type',
  contact_4_type: 'contact_4_type',
  atm: 'atm',
  atm_max_time: 'atm_max_time',
  buz: 'buz',
  buz_cycles: 'buz_cycles',
  buz_frequency: 'buz_frequency',
  crs: 'crs',
  crs_nom_resistance: 'crs_nom_resistance',
  crs_tolerance: 'crs_tolerance',
  dio: 'dio',
  dcp: 'dcp',
  dcp_max_peak_to_peak: 'dcp_max_peak_to_peak',
  dcr: 'dcr',
  dcr_max_peak: 'dcr_max_peak',
  dcr_start_measurment_window: 'dcr_start_measurment_window',
  dcr_window_width: 'dcr_window_width',
  dcr_sweeps: 'dcr_sweeps',
  fbo: 'fbo',
  fbo_percent_overdrive: 'fbo_percent_overdrive',
  fbo_delay: 'fbo_delay',
  irs: 'irs',
  irs_range: 'irs_range',
  irs_test_voltage: 'irs_test_voltage',
  irs_delay: 'irs_delay',
  kel: 'kel',
  ocu: 'ocu',
  ocu_max_current: 'ocu_max_current',
  ocu_min_current: 'ocu_min_current',
  otm: 'otm',
  otm_max_time: 'otm_max_time',
  vtd: 'vtd',
  vtd_min_differential: 'vtd_min_differential',
  vtd_max_differential: 'vtd_max_differential',
  vtr: 'vtr',
  vtr_max_percentage: 'vtr_max_percentage',
  vtr_min_percentage: 'vtr_min_percentage',
  ovt: 'ovt',
  ovt_max_voltage: 'ovt_max_voltage',
  ovt_min_voltage: 'ovt_min_voltage',
  ovt_delay: 'ovt_delay',
  rcu: 'rcu',
  rcu_max_current: 'rcu_max_current',
  rcu_min_current: 'rcu_min_current',
  rtm: 'rtm',
  rtm_max_time: 'rtm_max_time',
  rvt: 'rvt',
  rvt_max_voltage: 'rvt_max_voltage',
  rvt_min_voltage: 'rvt_min_voltage',
  rvt_delay: 'rvt_delay',
  scr: 'scr',
  scr_max_resistance: 'scr_max_resistance',
  scr_min_resistance: 'scr_min_resistance',
  scr_delay: 'scr_delay',
  scs: 'scs',
  scs_max_delta: 'scs_max_delta',
  scs_cycles: 'scs_cycles',
  scs_warm_up: 'scs_warm_up',
  scs_delay: 'scs_delay',
  sho: 'sho',
  sho_threshold_resistance: 'sho_threshold_resistance',
  ttm: 'ttm',
  ttm_min_time: 'ttm_min_time'
};

exports.Prisma.Sort_limitsScalarFieldEnum = {
  file_name: 'file_name',
  low_limit: 'low_limit',
  hi_limit: 'hi_limit'
};

exports.Prisma.Sys_configScalarFieldEnum = {
  variable: 'variable',
  value: 'value',
  set_time: 'set_time',
  set_by: 'set_by'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  pn: 'pn',
  application: 'application',
  user: 'user',
  is_standard_test: 'is_standard_test',
  type_of_test: 'type_of_test',
  revision: 'revision',
  job_order: 'job_order',
  plt: 'plt',
  datecode: 'datecode',
  lot_number: 'lot_number',
  start_datetime: 'start_datetime',
  end_datetime: 'end_datetime',
  relays_tested: 'relays_tested',
  relays_passed_420: 'relays_passed_420',
  relays_failed_420: 'relays_failed_420',
  yield: 'yield',
  relays_failed_non_420: 'relays_failed_non_420',
  total_quantity: 'total_quantity',
  reject_quantity: 'reject_quantity',
  final_yield: 'final_yield',
  issue_quantity: 'issue_quantity',
  issue_yield: 'issue_yield',
  elapsed_time: 'elapsed_time',
  test_time: 'test_time',
  idle_time: 'idle_time'
};

exports.Prisma.Test_fails_non_420ScalarFieldEnum = {
  id: 'id',
  total_failed_non_420: 'total_failed_non_420',
  failed_mechanical_crack: 'failed_mechanical_crack',
  failed_mechanical_potting: 'failed_mechanical_potting',
  failed_mechanical_plating: 'failed_mechanical_plating',
  failed_mechanical_stamping: 'failed_mechanical_stamping',
  failed_mechanical_trimming: 'failed_mechanical_trimming',
  failed_mechanical_dimensional: 'failed_mechanical_dimensional',
  failed_mechanical_other: 'failed_mechanical_other',
  failed_electrical_thermal: 'failed_electrical_thermal',
  failed_electrical_magnet: 'failed_electrical_magnet',
  failed_electrical_resonent: 'failed_electrical_resonent',
  failed_electrical_breakdown: 'failed_electrical_breakdown',
  failed_electrical_timing: 'failed_electrical_timing',
  failed_electrical_other: 'failed_electrical_other'
};

exports.Prisma.Test_resultScalarFieldEnum = {
  test_id: 'test_id',
  dut_no: 'dut_no',
  test_type: 'test_type',
  switch: 'switch',
  result: 'result',
  value: 'value'
};

exports.Prisma.Test_result_insulation_resistanceScalarFieldEnum = {
  test_id: 'test_id',
  dut_no: 'dut_no',
  coil_value: 'coil_value',
  shield_value: 'shield_value',
  switch1t_value: 'switch1t_value',
  switch1b_value: 'switch1b_value',
  switch2t_value: 'switch2t_value',
  switch2b_value: 'switch2b_value',
  switch3t_value: 'switch3t_value',
  switch3b_value: 'switch3b_value',
  switch4t_value: 'switch4t_value',
  switch4b_value: 'switch4b_value'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  first_name: 'first_name',
  last_name: 'last_name',
  user_type: 'user_type',
  password: 'password'
};

exports.Prisma.User_logScalarFieldEnum = {
  id: 'id',
  id_user: 'id_user',
  datetime: 'datetime'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  part_test_legacy: 'part_test_legacy',
  part_test_specifications: 'part_test_specifications',
  sort_limits: 'sort_limits',
  sys_config: 'sys_config',
  test: 'test',
  test_fails_non_420: 'test_fails_non_420',
  test_result: 'test_result',
  test_result_insulation_resistance: 'test_result_insulation_resistance',
  user: 'user',
  user_log: 'user_log'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
